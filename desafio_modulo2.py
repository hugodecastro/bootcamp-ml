# -*- coding: utf-8 -*-
"""desafio_modulo2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11-ICydNyjDCZBfqcjm0caEteBhHpV67Q

# Desafio - Módulo 2

## Atividades (Enunciado)

Os alunos deverão desempenhar as seguintes atividades:]

### 1. Acessar o ambiente Google Colaboratory (recomendado) ou qualquer ambiente  de desenvolvimento em Python.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""### 2. Carregar o dataset https://pycourse.s3.amazonaws.com/banknote_authentication.txt para análise utilizando o pandas. Exemplo:"""

df = pd.read_csv('https://pycourse.s3.amazonaws.com/banknote_authentication.txt', header=None, names=['variance', 'skewness', 'curtosis', 'entropy', 'class'])

# Amostra do dataframe
df.head()

# Dimensões (linhas x colunas) do dataframe
df.shape

# Informações das variáveis do dataframe (nomes, quantidades não nulas, tipos inferidos)
df.info()

# Estatísticas básicas das variáveis numéricas do dataframe
df.describe()

"""### 4. Utilize a variável “class” como saída e as demais como entrada dos modelos."""

X = df.iloc[:, :-1].values
y = df.iloc[:, 4].values

"""### 3. Divida o dataset utilizando a função train_test_split, conforme:

a. Conjunto de treino (70%);

b. Conjunto de teste (30%);

c. random_state=1.
"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)

"""### 5. Para implementação dos algoritmos, utilize as seguintes definições (do sklearn):

a. Algoritmo KNN:
"""

from sklearn.neighbors import KNeighborsClassifier
clf_KNN = KNeighborsClassifier(n_neighbors=5)

"""b. Algoritmo Árvore de Decisão (Decision Tree):"""

from sklearn.tree import DecisionTreeClassifier
clf_arvore = DecisionTreeClassifier(random_state=1)

"""c. Algoritmo Floresta Aleatória (Random Forest):"""

from sklearn.ensemble import RandomForestClassifier
clf_floresta = RandomForestClassifier(max_depth=8, random_state=1)

"""d. Algoritmo SVM:"""

from sklearn.svm import SVC
clf_svm = SVC(gamma='auto', kernel='rbf', random_state=1)

"""e. Algoritmo Rede MLP:"""

from sklearn.neural_network import MLPClassifier
clf_mlp = MLPClassifier(hidden_layer_sizes=(2,), solver='lbfgs', random_state=1)

"""## Pergunta 1

Qual o tamanho desse dataset (número de linhas, número de colunas)?
"""

df.shape

"""## Pergunta 2

Qual variável possui o maior range (diferença entre valor máximo e mínimo)?
"""

ranges = df.max() - df.min()
ranges.sort_values(ascending=False).head(1)

"""## Pergunta 3

Qual a média da coluna skewness?
"""

df['skewness'].mean()

"""## Pergunta 4

Qual a média da coluna entropy?
"""

df['entropy'].mean()

"""## Pergunta 5

Qual a mediana da coluna variance?
"""

df['variance'].median()

"""## Pergunta 6

Qual a desvio padrão da coluna curtosis?
"""

df['curtosis'].std()

"""## Pergunta 7

Qual a porcentagem de exemplos do dataset que são cédulas falsas (class=1)?
"""

quantidade_falsas = (df['class'] == 1).sum()
quantidade_total = df.shape[0]

quantidade_falsas / quantidade_total * 100

"""## Pergunta 8

Qual o valor da correlação de Pearson entre as variáveis skewness e curtosis?
"""

df[['skewness', 'curtosis']].corr().iloc[0,1]

"""## Pergunta 9

Qual a acurácia do KNN no conjunto de teste?
"""

clf_KNN.fit(X_train, y_train)
y_pred_KNN = clf_KNN.predict(X_test)

from sklearn.metrics import accuracy_score
accuracy_score(y_test, y_pred_KNN)

"""## Pergunta 10

Qual a acurácia da Árvore de Decisão no conjunto de teste?
"""

clf_arvore.fit(X_train, y_train)
y_pred_arvore = clf_arvore.predict(X_test)

from sklearn.metrics import accuracy_score
accuracy_score(y_test, y_pred_arvore)

"""## Pergunta 11

Qual a acurácia do Random Forest no conjunto de teste?
"""

clf_floresta.fit(X_train, y_train)
y_pred_floresta = clf_floresta.predict(X_test)

from sklearn.metrics import accuracy_score
accuracy_score(y_test, y_pred_floresta)

"""## Pergunta 12

Analisando o valor da importância relativa das features do Random Forest (atributo feature_importances_), qual feature melhor contribuiu para a predição de class?
"""

index_max = clf_floresta.feature_importances_.argmax()
df.columns[index_max]

"""## Pergunta 13

Qual o valor da importância relativa da feature skewness?
"""

index_skewness = (df.columns == 'skewness').argmax()
clf_floresta.feature_importances_[index_skewness]

"""## Pergunta 14

Qual a acurácia do SVM no conjunto de teste?
"""

clf_svm.fit(X_train, y_train)
y_pred_svm = clf_svm.predict(X_test)

from sklearn.metrics import accuracy_score
accuracy_score(y_test, y_pred_svm)

"""## Pergunta 15

Qual a acurácia da rede MLP no conjunto de teste?
"""

clf_mlp.fit(X_train, y_train)
y_pred_mlp = clf_mlp.predict(X_test)

from sklearn.metrics import accuracy_score
accuracy_score(y_test, y_pred_mlp)